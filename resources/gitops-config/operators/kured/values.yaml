kured:
  image:
    repository: ghcr.io/kubereboot/kured
    tag: "1.17.1"
    pullPolicy: IfNotPresent
    pullSecrets: []

  revisionHistoryLimit: 10

  updateStrategy: RollingUpdate
  #  requires RollingUpdate updateStrategy
  maxUnavailable: 1

  podAnnotations: {}
  # container.apparmor.security.beta.kubernetes.io/kured: unconfined

  dsAnnotations: {}

  extraArgs: {}

  extraEnvVars:
  #  - name: slackHookUrl
  #    valueFrom:
  #      secretKeyRef:
  #        name: secret_name
  #        key: secret_key
  #  - name: regularEnvVariable
  #    value: 123

  configuration:
    useRebootSentinelHostPath: true  # not actually a flag, indicates if the sentinel should be mounted
    metricsHost: ""               # host where metrics will listen
    metricsPort: 8080             # port number where metrics will listen
    alertFiringOnly: false        # only consider firing alerts when checking for active alerts
    alertFilterMatchOnly: false   # Only block if the alert-filter-regexp matches active alerts
    endTime: "5:00"               # only reboot before this time of day (default "23:59")
    prometheusUrl: ""             # Prometheus instance to probe for active alerts
    rebootDays: [su,fr,sa]        # only reboot on these days (default [su,mo,tu,we,th,fr,sa])
    rebootSentinel: "/var/run/reboot-required"  # path to file whose existence signals need to reboot (default "/var/run/reboot-required")
    rebootSentinelCommand: ""     # command for which a successful run signals need to reboot (default ""). If non-empty, sentinel file will be ignored.
    rebootCommand: "/bin/systemctl reboot"  # command to run when a reboot is required by the sentinel
    notifyUrl: "slack://hook:T03JEKCAZJT-B06EQQT006R-bgOhSBrA6CfKNMSz4QJJkjZI@C06ED60SMRV" # URL to notify when a reboot is required by the sentinel   
    slackChannel: ""              # slack channel for reboot notifications
    slackHookUrl: ""              # slack hook URL for reboot notifications
    slackUsername: ""             # slack username for reboot notifications (default "kured")
    startTime: "2:00"             # only reboot after this time of day (default "0:00")
    timeZone: "Europe/Amsterdam"  # time-zone to use (valid zones from "time" golang package)


  rbac:
    create: true

  serviceAccount:
    create: true
    name:

  podSecurityPolicy:
    create: false

  containerSecurityContext:
    privileged: true  # Give permission to nsenter /proc/1/ns/mnt
    readOnlyRootFilesystem: true
  #  allowPrivilegeEscalation: true # Needed when using defaultAllowPrivilegedEscalation: false in psp

  # Use the following security-context when "configuration.rebootMethod=signal and configuration.useRebootSentinelHostPath=true"
  # containerSecurityContext:
  #   privileged: false
  #   readOnlyRootFilesystem: true
  #   allowPrivilegeEscalation: false
  #   capabilities:
  #     add:
  #     - CAP_KILL
  #     drop:
  #     - '*'

  resources: {}

  hostNetwork: false

  metrics:
    create: false
    namespace: ""
    labels: {}
    interval: 60s
    scrapeTimeout: ""

  service:
    create: false
    port: 8080
    annotations: {}
    name: ""
    type: ClusterIP

  livenessProbe:
    httpGet:
      path: /metrics
      port: metrics
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  readinessProbe:
    httpGet:
      path: /metrics
      port: metrics
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  podLabels: {}

  priorityClassName: ""

  tolerations:
  - key: node-role.kubernetes.io/master
    operator: Equal
    value: "true"
    effect: NoSchedule

  affinity: {}

  nodeSelector:
    kubernetes.io/os: linux

  volumeMounts: []

  volumes: []

  initContainers: {}
